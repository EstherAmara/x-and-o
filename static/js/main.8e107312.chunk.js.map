{"version":3,"sources":["index.js"],"names":["calculateWinner","squares","lines","i","length","a","b","c","Square","props","className","onClick","value","Board","this","renderSquare","Component","Game","handleClick","history","state","slice","stepNumber","xIsNext","setState","concat","jumpTo","step","Array","fill","current","winner","moves","map","move","desc","key","status","ReactDOM","render","document","getElementById"],"mappings":"+PAIMA,G,MAAkB,SAACC,GAWrB,IAVA,IAAMC,EAAQ,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEFC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACjBD,EAAMC,GADW,GAC5BE,EAD4B,KACzBC,EADyB,KACtBC,EADsB,KAEnC,GAAGN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACjE,OAAON,EAAQI,GAIvB,OAAO,OAGLG,EAAS,SAACC,GACZ,OACI,4BACIC,UAAU,SACVC,QAASF,EAAME,SAEdF,EAAMG,QAKbC,E,2KACWV,GAAI,IAAD,OACZ,OACI,kBAACK,EAAD,CACII,MAAOE,KAAKL,MAAMR,QAAQE,GAC1BQ,QAAW,kBAAM,EAAKF,MAAME,QAAQR,Q,+BAM5C,OACI,6BACI,yBAAKO,UAAU,aACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKL,UAAU,aACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,IAEvB,yBAAKL,UAAU,aACVI,KAAKC,aAAa,GAClBD,KAAKC,aAAa,GAClBD,KAAKC,aAAa,S,GA1BnBC,aAiCdC,E,kDACF,WAAYR,GAAQ,IAAD,8BACf,cAAMA,IAUVS,YAAc,SAAAf,GACV,IAAMgB,EAAU,EAAKC,MAAMD,QAAQE,MAAM,EAAG,EAAKD,MAAME,WAAa,GAE9DrB,EADUkB,EAAQA,EAAQf,OAAQ,GAChBH,QAAQoB,QAC7BrB,EAAgBC,IAAYA,EAAQE,KAGvCF,EAAQE,GAAK,EAAKiB,MAAMG,QAAU,IAAM,IACxC,EAAKC,SAAS,CACVL,QAASA,EAAQM,OAAO,CAAC,CACrBxB,QAASA,KAEbsB,SAAU,EAAKH,MAAMG,QACrBD,WAAYH,EAAQf,WAxBT,EA4BnBsB,OAAS,SAACC,GACN,EAAKH,SAAS,CACVF,WAAYK,EACZJ,QAAUI,EAAK,IAAO,KA7B1B,EAAKP,MAAQ,CACTD,QAAS,CAAC,CACNlB,QAAS2B,MAAM,GAAGC,KAAK,QAE3BN,SAAS,EACTD,WAAY,GAPD,E,qDAmCT,IAAD,OACCH,EAAUL,KAAKM,MAAMD,QACrBW,EAAUX,EAAQL,KAAKM,MAAME,YAC7BS,EAAS/B,EAAgB8B,EAAQ7B,SACjC+B,EAAQb,EAAQc,KAAI,SAACN,EAAMO,GAC7B,IAAMC,EAAOD,EACT,eAAiBA,EACjB,mBACJ,OACI,wBAAIE,IAAKF,GACL,4BAAQvB,QAAS,kBAAI,EAAKe,OAAOQ,KAC5BC,OAKbE,EAASN,EACP,WAAaA,EACb,iBAAmBjB,KAAKM,MAAMG,QAAU,IAAM,KAEpD,OACI,yBAAKb,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CACIZ,QAAW6B,EAAQ7B,QACnBU,QAAW,SAACR,GAAD,OAAO,EAAKe,YAAYf,OAG3C,yBAAKO,UAAU,aACX,iCAAO2B,EAAP,KACA,gCAAML,EAAN,W,GAlEDhB,aAyEnBsB,IAASC,OACL,kBAACtB,EAAD,MACAuB,SAASC,eAAe,W","file":"static/js/main.8e107312.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nconst calculateWinner = (squares) => {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n        const [a, b, c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return squares[a];\r\n        }\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst Square = (props) => {\r\n    return (\r\n        <button\r\n            className=\"square\"\r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends Component {\r\n    renderSquare(i) {        \r\n        return (\r\n            <Square \r\n                value={this.props.squares[i]} \r\n                onClick = {() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {        \r\n        return (\r\n            <div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(0)}\r\n                    {this.renderSquare(1)}\r\n                    {this.renderSquare(2)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(3)}\r\n                    {this.renderSquare(4)}\r\n                    {this.renderSquare(5)}\r\n                </div>\r\n                <div className=\"board-row\">\r\n                    {this.renderSquare(6)}\r\n                    {this.renderSquare(7)}\r\n                    {this.renderSquare(8)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            xIsNext: true,\r\n            stepNumber: 0,\r\n        };\r\n    }\r\n\r\n    handleClick = i => {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length -1];\r\n        const squares = current.squares.slice();\r\n        if(calculateWinner(squares) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n            }]),\r\n            xIsNext: !this.state.xIsNext,\r\n            stepNumber: history.length,\r\n        });\r\n    }\r\n\r\n    jumpTo = (step) => {\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step%2) === 0,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n        const winner = calculateWinner(current.squares);\r\n        const moves = history.map((step, move) => {\r\n            const desc = move ?\r\n                'Go to move #' + move :\r\n                'Go to game start';\r\n            return (\r\n                <li key={move}>\r\n                    <button onClick={()=>this.jumpTo(move)}> \r\n                        {desc} \r\n                    </button>\r\n                </li>\r\n            )\r\n        });\r\n        let status = winner \r\n            ? 'Winner: ' + winner\r\n            : 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board \r\n                        squares = {current.squares}\r\n                        onClick = {(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div> {status} </div>\r\n                    <ol> {moves} </ol>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}